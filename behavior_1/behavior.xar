<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="TodoApp/AddTask" type="0" type_size="1" nature="4" stm_value_name="TodoApp/AddTask" inner="1" tooltip="TodoApp/AddTask desc" id="4" />
        <Input name="TodoApp/DoneTask" type="0" type_size="1" nature="4" stm_value_name="TodoApp/DoneTask" inner="1" tooltip="TodoApp/DoneTask desc" id="5" />
        <Input name="HandLeftBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftBackTouched" inner="1" tooltip="HandLeftBackTouched desc" id="6" />
        <Input name="TodoApp/RemindTodayTasks" type="0" type_size="1" nature="4" stm_value_name="TodoApp/RemindTodayTasks" inner="1" tooltip="TodoApp/RemindTodayTasks desc" id="7" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="8" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="100">
                        <Box name="Censor Emulator" id="4" localization="8" tooltip="" x="466" y="39">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Behavior Name" inherits_from_parent="0" content_type="3" value="behavior_1" default_value="root" custom_choice="0" tooltip="" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Construct Censor" id="4" localization="8" tooltip="" x="87" y="22">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.html_buttons = ""
        self.js_buttons = ""

    def onInput_onStart(self):
        import elementtree.ElementTree
        path = "/usr/local/var/www/apps/.lastUploadedChoregrapheBehavior/"
        behavior_name = str(self.getParameter("Behavior Name"))

        if behavior_name == "root":
            root_box = elementtree.ElementTree.parse(path + "behavior.xar").getroot()
        else:
            root_box = elementtree.ElementTree.parse(path + behavior_name + "/behavior.xar").getroot()

        for child in root_box:
            self.iterateOnElements(child)

        html = """<!doctype html>
                    <html>
                    <head>
                    <meta charset="UTF-8">
                    <title>""" + behavior_name + """ Censor</title>
                    <link href='https://fonts.googleapis.com/css?family=Lato:100' rel='stylesheet' type='text/css'>
                    <link rel="stylesheet" type="text/css" href="css/censor_style.css">
                    <script src="/libs/qimessaging/1.0/qimessaging.js"></script>
                    <script src="scripts/""" + behavior_name + """_functions.js"></script>
                    </head>
                    <body>
                        <div class="container">
                            """ + self.html_buttons + """
                        </div>
                    </body>
                    </html>"""

        js = """var session = new QiSession();""" + self.js_buttons

        with open(path + "html/" + behavior_name + ".html", 'w') as file:
            file.write(str(html))

        with open(path + "html/scripts/" + behavior_name + "_functions.js", 'w') as file:
            file.write(str(js))

        self.onStopped(behavior_name)

    def iterateOnElements(self, child):
        for x in child:
            x_tag = str(x.tag).replace("{http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd}", "")
            special_characters = ["`", "~", "!", "@", "%", "^", "&", "(", ")", "+", "-", "=", "{", "}", "[", "]", ";", """'""", ":", '''"''', "|", ",", ".", "/", "<", ">", "?", "#", " "]
            if x_tag == "Input":

                element = str(x.attrib['name'])
                element_name = str(x.attrib['name'])
                child_name = str(child.attrib['name'])

                for sp in special_characters:
                    element_name = element_name.replace(sp, "")
                    child_name = child_name.replace(sp, "")

                element_string = child_name + "_" + element_name
                if element != "onLoad" and element != "onStart" and element != "onStop":
                    self.html_buttons += """<div class="button" onclick='""" + element_string + """("1");'><div class="button-text">""" + "[" + child_name + "] " + element + """</div></div>"""
                    self.js_buttons += """function """+ element_string + """(value) {
                                        session.service("ALMemory").done(function (ALMemory) {
                                            ALMemory.raiseEvent('"""+ element + """', value);
                                        });
                                    }"""
            elif x_tag == "Timeline":
                for behavior_layer in x:
                    for behavior_keyframe in behavior_layer:
                        for diagram in behavior_keyframe:
                            for box in diagram:
                                box_tag = str(box.tag).replace("{http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd}", "")
                                if box_tag == "Box":
                                    self.iterateOnElements(box)
                            break
                        break
                    break]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Behavior Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Show Censor" id="11" localization="8" tooltip="" x="214" y="22">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onStart(self, p):
        self.tabletService = self.session().service("ALTabletService")
        self.tabletService.showWebview("http://localhost/apps/.lastUploadedChoregrapheBehavior/" + str(p) +".html")
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Link inputowner="11" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Load ElementTree Library" id="10" localization="8" tooltip="" x="314" y="32">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onStart(self):
        import sys
        folderName = "/usr/local/var/www/apps/.lastUploadedChoregrapheBehavior/lib"
        if folderName not in sys.path:
            sys.path.append(folderName)
        for moduleName in os.listdir(folderName):
            if moduleName in sys.modules:
                reload(sys.modules[moduleName])
        reload(sys)
        sys.setdefaultencoding('utf8')
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        </Box>
                        <Box name="Web" id="1" localization="8" tooltip="" x="326" y="142">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onStart(self):
        self.tabletService = ALProxy('ALTabletService')
        self.tabletService.showWebview("http://localhost/apps/.lastUploadedChoregrapheBehavior/index.html")
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="TaskAction" id="6" localization="8" tooltip="" x="344" y="375">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_addTask(self, p):
        self.tts.say("New task added. " + p)
        pass

    def onInput_doneTask(self, p):
        self.tts.say("Deleted task. " + p)
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="addTask" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Input name="doneTask" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                        </Box>
                        <Box name="GetTasks" id="8" localization="8" tooltip="" x="594" y="410">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import requests
import sched, time
import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")
        s = sched.scheduler(time.time, time.sleep)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("test")
        pass

    def onInput_filter(self, p):
        endpoint = "http://localhost:8888/todo/api/tasks?q=" + p
        r = requests.get(endpoint)

        data = r.json()

        tasksString = ""

        for i,task in enumerate(data):
            if i != len(data) - 1:
                tasksString += str(task['name']) + " , "
            else:
                tasksString += "and " + str(task['name']) + "."

        self.logger.info(tasksString)

        taskWord = "task" if (len(r.json()) == 1) else "tasks"

        if p == 'weekly':
            time = 'this week'
        elif p == 'monthly':
            time = 'this month'
        elif p == 'today':
            time = 'today'
        else:
            time = ''

        sayText = "You have "
        sayText += str(len(r.json())) + " " # e.g. 3
        sayText += taskWord + " " # e.g. task or tasks
        sayText += time + ". " # e.g. today or this month
        sayText += tasksString # e.g. the tasks separated by commas

        self.tts.say(sayText)
        self.onInput_onStop()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="filter" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                        </Box>
                        <Box name="SayTasks" id="9" localization="8" tooltip="" x="597" y="224">
                            <dialogFile>../SayTasks/SayTasks.dlg</dialogFile>
                            <bitmap>media/images/box/box-dialog.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="3" />
                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="6" indexofinput="5" outputowner="0" indexofoutput="5" />
                        <Link inputowner="6" indexofinput="4" outputowner="0" indexofoutput="4" />
                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="6" />
                        <Link inputowner="8" indexofinput="4" outputowner="9" indexofoutput="4" />
                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="5" />
                        <Link inputowner="8" indexofinput="4" outputowner="0" indexofoutput="7" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
